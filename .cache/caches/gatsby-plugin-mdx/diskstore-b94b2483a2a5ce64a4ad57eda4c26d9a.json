{"expireTime":9007200825381901000,"key":"gatsby-plugin-mdx-entire-payload-6caef1c1ad75799c95c72167e16dbb58-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/mjperrins/projects/cat/guide/node_modules/gatsby-theme-carbon/src/templates/Default.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":122,"offset":123},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":125},"end":{"line":5,"column":29,"offset":153},"indent":[]}},{"type":"jsx","value":"<PageDescription>","position":{"start":{"line":8,"column":1,"offset":156},"end":{"line":8,"column":18,"offset":173},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use this guide to contribute to the theme. We'll show you how to get the development environment set up as quickly as possible so you can start contributing.","position":{"start":{"line":10,"column":1,"offset":175},"end":{"line":10,"column":158,"offset":332},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":175},"end":{"line":10,"column":158,"offset":332},"indent":[]}},{"type":"jsx","value":"</PageDescription>","position":{"start":{"line":12,"column":1,"offset":334},"end":{"line":12,"column":19,"offset":352},"indent":[]}},{"type":"jsx","value":"<AnchorLinks>\n  <AnchorLink>Project setup</AnchorLink>\n  <AnchorLink>Development</AnchorLink>\n  <AnchorLink>Work in a branch</AnchorLink>\n  <AnchorLink>Sass and CSS Modules</AnchorLink>\n  <AnchorLink>VS Code</AnchorLink>\n</AnchorLinks>","position":{"start":{"line":14,"column":1,"offset":354},"end":{"line":20,"column":15,"offset":589},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Project setup","position":{"start":{"line":22,"column":4,"offset":594},"end":{"line":22,"column":17,"offset":607},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":591},"end":{"line":22,"column":17,"offset":607},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Go to ","position":{"start":{"line":24,"column":4,"offset":612},"end":{"line":24,"column":10,"offset":618},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/carbon-design-system/gatsby-theme-carbon","children":[{"type":"text","value":"gatsby-theme-carbon","position":{"start":{"line":24,"column":11,"offset":619},"end":{"line":24,"column":30,"offset":638},"indent":[]}}],"position":{"start":{"line":24,"column":10,"offset":618},"end":{"line":24,"column":92,"offset":700},"indent":[]}},{"type":"text","value":" and click the ","position":{"start":{"line":24,"column":92,"offset":700},"end":{"line":24,"column":107,"offset":715},"indent":[]}},{"type":"inlineCode","value":"Fork","position":{"start":{"line":24,"column":107,"offset":715},"end":{"line":24,"column":113,"offset":721},"indent":[]}},{"type":"text","value":" button in the top-right corner.","position":{"start":{"line":24,"column":113,"offset":721},"end":{"line":24,"column":145,"offset":753},"indent":[]}}],"position":{"start":{"line":24,"column":4,"offset":612},"end":{"line":24,"column":145,"offset":753},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":609},"end":{"line":25,"column":1,"offset":754},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"After it's finished, click on the ","position":{"start":{"line":26,"column":4,"offset":758},"end":{"line":26,"column":38,"offset":792},"indent":[]}},{"type":"inlineCode","value":"Clone or Download","position":{"start":{"line":26,"column":38,"offset":792},"end":{"line":26,"column":57,"offset":811},"indent":[]}},{"type":"text","value":" button and copy the contents.","position":{"start":{"line":26,"column":57,"offset":811},"end":{"line":26,"column":87,"offset":841},"indent":[]}}],"position":{"start":{"line":26,"column":4,"offset":758},"end":{"line":26,"column":87,"offset":841},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":755},"end":{"line":27,"column":1,"offset":842},"indent":[1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"In your terminal, clone the repo into your directory of choice","position":{"start":{"line":28,"column":4,"offset":846},"end":{"line":28,"column":66,"offset":908},"indent":[]}}],"position":{"start":{"line":28,"column":4,"offset":846},"end":{"line":28,"column":66,"offset":908},"indent":[]}},{"type":"code","lang":"sh","meta":null,"value":"git clone [PASTE_URL_HERE]\ncd gatsby-theme-carbon","position":{"start":{"line":30,"column":4,"offset":913},"end":{"line":33,"column":7,"offset":981},"indent":[4,4,4]}}],"position":{"start":{"line":28,"column":1,"offset":843},"end":{"line":34,"column":1,"offset":982},"indent":[1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"When you clone your forked repo the ","position":{"start":{"line":35,"column":4,"offset":986},"end":{"line":35,"column":40,"offset":1022},"indent":[]}},{"type":"inlineCode","value":"origin","position":{"start":{"line":35,"column":40,"offset":1022},"end":{"line":35,"column":48,"offset":1030},"indent":[]}},{"type":"text","value":" is set to your fork by default. You'll want to add a remote that points to the upstream repo.","position":{"start":{"line":35,"column":48,"offset":1030},"end":{"line":35,"column":142,"offset":1124},"indent":[]}}],"position":{"start":{"line":35,"column":4,"offset":986},"end":{"line":35,"column":142,"offset":1124},"indent":[]}},{"type":"code","lang":"sh","meta":null,"value":"git remote add upstream git@github.com:carbon-design-system/gatsby-theme-carbon.git","position":{"start":{"line":37,"column":4,"offset":1129},"end":{"line":39,"column":7,"offset":1228},"indent":[4,4]}}],"position":{"start":{"line":35,"column":1,"offset":983},"end":{"line":40,"column":1,"offset":1229},"indent":[1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"In your terminal, verify that the remotes have been set","position":{"start":{"line":41,"column":4,"offset":1233},"end":{"line":41,"column":59,"offset":1288},"indent":[]}}],"position":{"start":{"line":41,"column":4,"offset":1233},"end":{"line":41,"column":59,"offset":1288},"indent":[]}},{"type":"code","lang":"sh","meta":null,"value":"git remote -v","position":{"start":{"line":43,"column":4,"offset":1293},"end":{"line":45,"column":7,"offset":1322},"indent":[4,4]}}],"position":{"start":{"line":41,"column":1,"offset":1230},"end":{"line":45,"column":7,"offset":1322},"indent":[1,1,1,1]}}],"position":{"start":{"line":24,"column":1,"offset":609},"end":{"line":45,"column":7,"offset":1322},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Development","position":{"start":{"line":47,"column":4,"offset":1327},"end":{"line":47,"column":15,"offset":1338},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":1324},"end":{"line":47,"column":15,"offset":1338},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We use ","position":{"start":{"line":49,"column":1,"offset":1340},"end":{"line":49,"column":8,"offset":1347},"indent":[]}},{"type":"link","title":null,"url":"https://yarnpkg.com/lang/en/docs/install/","children":[{"type":"text","value":"yarn","position":{"start":{"line":49,"column":9,"offset":1348},"end":{"line":49,"column":13,"offset":1352},"indent":[]}}],"position":{"start":{"line":49,"column":8,"offset":1347},"end":{"line":49,"column":57,"offset":1396},"indent":[]}},{"type":"text","value":" and yarn workspaces to develop the Carbon Gatsby theme. This allows us to have a development environment that's closely linked to the theme with minimal setup. Run ","position":{"start":{"line":49,"column":57,"offset":1396},"end":{"line":49,"column":222,"offset":1561},"indent":[]}},{"type":"inlineCode","value":"yarn install","position":{"start":{"line":49,"column":222,"offset":1561},"end":{"line":49,"column":236,"offset":1575},"indent":[]}},{"type":"text","value":" to install all of the projects dependencies.","position":{"start":{"line":49,"column":236,"offset":1575},"end":{"line":49,"column":281,"offset":1620},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1340},"end":{"line":49,"column":281,"offset":1620},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This project has two packages: the actual theme package (","position":{"start":{"line":51,"column":1,"offset":1622},"end":{"line":51,"column":58,"offset":1679},"indent":[]}},{"type":"inlineCode","value":"gatsby-theme-carbon","position":{"start":{"line":51,"column":58,"offset":1679},"end":{"line":51,"column":79,"offset":1700},"indent":[]}},{"type":"text","value":") and the ","position":{"start":{"line":51,"column":79,"offset":1700},"end":{"line":51,"column":89,"offset":1710},"indent":[]}},{"type":"inlineCode","value":"example","position":{"start":{"line":51,"column":89,"offset":1710},"end":{"line":51,"column":98,"offset":1719},"indent":[]}},{"type":"text","value":" package. The example package emulates a project which uses the theme. Its only dependencies are Gatsby, React, and the adjacent theme package. The ","position":{"start":{"line":51,"column":98,"offset":1719},"end":{"line":51,"column":246,"offset":1867},"indent":[]}},{"type":"inlineCode","value":"example","position":{"start":{"line":51,"column":246,"offset":1867},"end":{"line":51,"column":255,"offset":1876},"indent":[]}},{"type":"text","value":" package also serves as the theme's documentation and ","position":{"start":{"line":51,"column":255,"offset":1876},"end":{"line":51,"column":309,"offset":1930},"indent":[]}},{"type":"link","title":null,"url":"https://gatsby-theme-carbon.now.sh","children":[{"type":"text","value":"website","position":{"start":{"line":51,"column":310,"offset":1931},"end":{"line":51,"column":317,"offset":1938},"indent":[]}}],"position":{"start":{"line":51,"column":309,"offset":1930},"end":{"line":51,"column":354,"offset":1975},"indent":[]}},{"type":"text","value":"; it's deployed on every merge to master.","position":{"start":{"line":51,"column":354,"offset":1975},"end":{"line":51,"column":395,"offset":2016},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1622},"end":{"line":51,"column":395,"offset":2016},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"New theme development will happen in the theme package while documentation and testing of that change will occur through changes in the example directory.","position":{"start":{"line":53,"column":1,"offset":2018},"end":{"line":53,"column":155,"offset":2172},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":2018},"end":{"line":53,"column":155,"offset":2172},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Development scripts","position":{"start":{"line":55,"column":5,"offset":2178},"end":{"line":55,"column":24,"offset":2197},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":2174},"end":{"line":55,"column":24,"offset":2197},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"yarn dev","position":{"start":{"line":57,"column":3,"offset":2201},"end":{"line":57,"column":13,"offset":2211},"indent":[]}},{"type":"text","value":" – start the development environment","position":{"start":{"line":57,"column":13,"offset":2211},"end":{"line":57,"column":49,"offset":2247},"indent":[]}}],"position":{"start":{"line":57,"column":3,"offset":2201},"end":{"line":57,"column":49,"offset":2247},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":2199},"end":{"line":57,"column":49,"offset":2247},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"yarn dev:clean","position":{"start":{"line":58,"column":3,"offset":2250},"end":{"line":58,"column":19,"offset":2266},"indent":[]}},{"type":"text","value":" – clear cache and restart dev","position":{"start":{"line":58,"column":19,"offset":2266},"end":{"line":58,"column":49,"offset":2296},"indent":[]}}],"position":{"start":{"line":58,"column":3,"offset":2250},"end":{"line":58,"column":49,"offset":2296},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":2248},"end":{"line":58,"column":49,"offset":2296},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"yarn format","position":{"start":{"line":59,"column":3,"offset":2299},"end":{"line":59,"column":16,"offset":2312},"indent":[]}},{"type":"text","value":" – format your code with prettier","position":{"start":{"line":59,"column":16,"offset":2312},"end":{"line":59,"column":49,"offset":2345},"indent":[]}}],"position":{"start":{"line":59,"column":3,"offset":2299},"end":{"line":59,"column":49,"offset":2345},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":2297},"end":{"line":59,"column":49,"offset":2345},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"yarn lint","position":{"start":{"line":60,"column":3,"offset":2348},"end":{"line":60,"column":14,"offset":2359},"indent":[]}},{"type":"text","value":" - check for errors in your javascript","position":{"start":{"line":60,"column":14,"offset":2359},"end":{"line":60,"column":52,"offset":2397},"indent":[]}}],"position":{"start":{"line":60,"column":3,"offset":2348},"end":{"line":60,"column":52,"offset":2397},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":2346},"end":{"line":60,"column":52,"offset":2397},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":2199},"end":{"line":60,"column":52,"offset":2397},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Work in a branch","position":{"start":{"line":62,"column":4,"offset":2402},"end":{"line":62,"column":20,"offset":2418},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":2399},"end":{"line":62,"column":20,"offset":2418},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You should always start a new project by pulling upstream changes into master and then creating a new branch. This workflow ensures you don't accidentally commit anything to your master branch and get stuck when trying to open a pull request.","position":{"start":{"line":64,"column":1,"offset":2420},"end":{"line":64,"column":243,"offset":2662},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":2420},"end":{"line":64,"column":243,"offset":2662},"indent":[]}},{"type":"code","lang":"sh","meta":null,"value":"git checkout master\ngit pull upstream master\ngit checkout -b my-branch-name","position":{"start":{"line":66,"column":1,"offset":2664},"end":{"line":70,"column":4,"offset":2749},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"When you're ready to open a pull request, push to your origin remote.","position":{"start":{"line":72,"column":1,"offset":2751},"end":{"line":72,"column":70,"offset":2820},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":2751},"end":{"line":72,"column":70,"offset":2820},"indent":[]}},{"type":"code","lang":"sh","meta":null,"value":"git push origin my-branch-name","position":{"start":{"line":74,"column":1,"offset":2822},"end":{"line":76,"column":4,"offset":2862},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You'll get a message in your terminal with a URL to open up a pull request in the upstream repository. Navigate to that URL and be sure to give a detailed summary of your pull request in the title and body section of the form.","position":{"start":{"line":78,"column":1,"offset":2864},"end":{"line":78,"column":227,"offset":3090},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":2864},"end":{"line":78,"column":227,"offset":3090},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Sass and CSS Modules","position":{"start":{"line":80,"column":4,"offset":3095},"end":{"line":80,"column":24,"offset":3115},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":3092},"end":{"line":80,"column":24,"offset":3115},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For internal theme components we use ","position":{"start":{"line":82,"column":1,"offset":3117},"end":{"line":82,"column":38,"offset":3154},"indent":[]}},{"type":"link","title":null,"url":"https://sass-lang.com/documentation/syntax","children":[{"type":"text","value":"Sass","position":{"start":{"line":82,"column":39,"offset":3155},"end":{"line":82,"column":43,"offset":3159},"indent":[]}}],"position":{"start":{"line":82,"column":38,"offset":3154},"end":{"line":82,"column":88,"offset":3204},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":82,"column":88,"offset":3204},"end":{"line":82,"column":93,"offset":3209},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/css-modules/css-modules#css-modules","children":[{"type":"text","value":"CSS Modules","position":{"start":{"line":82,"column":94,"offset":3210},"end":{"line":82,"column":105,"offset":3221},"indent":[]}}],"position":{"start":{"line":82,"column":93,"offset":3209},"end":{"line":82,"column":162,"offset":3278},"indent":[]}},{"type":"text","value":". This allows us to take advantage of the Carbon Design System resources while not worrying about className collisions. By default, each ","position":{"start":{"line":82,"column":162,"offset":3278},"end":{"line":82,"column":299,"offset":3415},"indent":[]}},{"type":"inlineCode","value":".scss","position":{"start":{"line":82,"column":299,"offset":3415},"end":{"line":82,"column":306,"offset":3422},"indent":[]}},{"type":"text","value":" file will be supplied with all of the Carbon Sass ","position":{"start":{"line":82,"column":306,"offset":3422},"end":{"line":82,"column":357,"offset":3473},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/carbon-design-system/carbon/blob/master/packages/components/src/globals/scss/_vars.scss","children":[{"type":"text","value":"variables","position":{"start":{"line":82,"column":358,"offset":3474},"end":{"line":82,"column":367,"offset":3483},"indent":[]}}],"position":{"start":{"line":82,"column":357,"offset":3473},"end":{"line":82,"column":476,"offset":3592},"indent":[]}},{"type":"text","value":": color, spacing, theme, and motion, as well as type and layout mixins, are imported automatically.","position":{"start":{"line":82,"column":476,"offset":3592},"end":{"line":82,"column":575,"offset":3691},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":3117},"end":{"line":82,"column":575,"offset":3691},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You should colocate your stylesheet with the component(s) that import it. If the component is ","position":{"start":{"line":84,"column":1,"offset":3693},"end":{"line":84,"column":95,"offset":3787},"indent":[]}},{"type":"inlineCode","value":"TreeView","position":{"start":{"line":84,"column":95,"offset":3787},"end":{"line":84,"column":105,"offset":3797},"indent":[]}},{"type":"text","value":" then the stylesheet should be ","position":{"start":{"line":84,"column":105,"offset":3797},"end":{"line":84,"column":136,"offset":3828},"indent":[]}},{"type":"inlineCode","value":"TreeView.module.scss","position":{"start":{"line":84,"column":136,"offset":3828},"end":{"line":84,"column":158,"offset":3850},"indent":[]}},{"type":"text","value":". All contained within the ","position":{"start":{"line":84,"column":158,"offset":3850},"end":{"line":84,"column":185,"offset":3877},"indent":[]}},{"type":"inlineCode","value":"TreeView","position":{"start":{"line":84,"column":185,"offset":3877},"end":{"line":84,"column":195,"offset":3887},"indent":[]}},{"type":"text","value":" directory.","position":{"start":{"line":84,"column":195,"offset":3887},"end":{"line":84,"column":206,"offset":3898},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":3693},"end":{"line":84,"column":206,"offset":3898},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"CSS Modules","position":{"start":{"line":86,"column":5,"offset":3904},"end":{"line":86,"column":16,"offset":3915},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":3900},"end":{"line":86,"column":16,"offset":3915},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You don't need to prefix your classes as CSS Modules will generate unique class names for you. Import the class from the ","position":{"start":{"line":88,"column":1,"offset":3917},"end":{"line":88,"column":122,"offset":4038},"indent":[]}},{"type":"inlineCode","value":".scss","position":{"start":{"line":88,"column":122,"offset":4038},"end":{"line":88,"column":129,"offset":4045},"indent":[]}},{"type":"text","value":" file.","position":{"start":{"line":88,"column":129,"offset":4045},"end":{"line":88,"column":135,"offset":4051},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":3917},"end":{"line":88,"column":135,"offset":4051},"indent":[]}},{"type":"code","lang":"scss","meta":"path=TreeView.module.scss","value":".treeView {\n  color: $text-01;\n}","position":{"start":{"line":90,"column":1,"offset":4053},"end":{"line":94,"column":4,"offset":4123},"indent":[1,1,1,1]}},{"type":"code","lang":"jsx","meta":"path=TreeView.js","value":"import { treeView } from './style.css';\n\nconst TreeView = props => <div className={treeView} />;","position":{"start":{"line":96,"column":1,"offset":4125},"end":{"line":100,"column":4,"offset":4249},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For conditionally applying class names, use the ","position":{"start":{"line":102,"column":1,"offset":4251},"end":{"line":102,"column":49,"offset":4299},"indent":[]}},{"type":"inlineCode","value":"classname","position":{"start":{"line":102,"column":49,"offset":4299},"end":{"line":102,"column":60,"offset":4310},"indent":[]}},{"type":"text","value":" library. Note how we're using a ","position":{"start":{"line":102,"column":60,"offset":4310},"end":{"line":102,"column":93,"offset":4343},"indent":[]}},{"type":"link","title":null,"url":"https://tylermcginnis.com/computed-property-names/","children":[{"type":"text","value":"computed property name","position":{"start":{"line":102,"column":94,"offset":4344},"end":{"line":102,"column":116,"offset":4366},"indent":[]}}],"position":{"start":{"line":102,"column":93,"offset":4343},"end":{"line":102,"column":169,"offset":4419},"indent":[]}},{"type":"text","value":" for the property being based to ","position":{"start":{"line":102,"column":169,"offset":4419},"end":{"line":102,"column":202,"offset":4452},"indent":[]}},{"type":"inlineCode","value":"cx","position":{"start":{"line":102,"column":202,"offset":4452},"end":{"line":102,"column":206,"offset":4456},"indent":[]}},{"type":"text","value":". That's because the className isn't literally ","position":{"start":{"line":102,"column":206,"offset":4456},"end":{"line":102,"column":253,"offset":4503},"indent":[]}},{"type":"inlineCode","value":"\"long\"","position":{"start":{"line":102,"column":253,"offset":4503},"end":{"line":102,"column":261,"offset":4511},"indent":[]}},{"type":"text","value":" it's a value generated by CSS Modules and placed in the ","position":{"start":{"line":102,"column":261,"offset":4511},"end":{"line":102,"column":318,"offset":4568},"indent":[]}},{"type":"inlineCode","value":"long","position":{"start":{"line":102,"column":318,"offset":4568},"end":{"line":102,"column":324,"offset":4574},"indent":[]}},{"type":"text","value":" variable.","position":{"start":{"line":102,"column":324,"offset":4574},"end":{"line":102,"column":334,"offset":4584},"indent":[]}}],"position":{"start":{"line":102,"column":1,"offset":4251},"end":{"line":102,"column":334,"offset":4584},"indent":[]}},{"type":"code","lang":"jsx","meta":"path=TreeView.js","value":"import cx from 'classname';\nimport { treeView, long } from './style.css';\n\nconst TreeView = props => {\n  const className = cx(treeView, {\n    [long]: props.long,\n  });\n  const TreeView = props => <div className={className} />;\n};","position":{"start":{"line":104,"column":1,"offset":4586},"end":{"line":114,"column":4,"offset":4843},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you need to target a global class not processed by CSS Modules, you can do so with the ","position":{"start":{"line":116,"column":1,"offset":4845},"end":{"line":116,"column":91,"offset":4935},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/css-modules/css-modules#exceptions","children":[{"type":"text","value":"global selector","position":{"start":{"line":116,"column":92,"offset":4936},"end":{"line":116,"column":107,"offset":4951},"indent":[]}}],"position":{"start":{"line":116,"column":91,"offset":4935},"end":{"line":116,"column":163,"offset":5007},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":116,"column":163,"offset":5007},"end":{"line":116,"column":164,"offset":5008},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":4845},"end":{"line":116,"column":164,"offset":5008},"indent":[]}},{"type":"code","lang":"scss","meta":null,"value":":global(.bx--grid) .codeBlock {\n  @include carbon--type-style('code-01');\n}","position":{"start":{"line":118,"column":1,"offset":5010},"end":{"line":122,"column":4,"offset":5097},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"VS Code","position":{"start":{"line":124,"column":4,"offset":5102},"end":{"line":124,"column":11,"offset":5109},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":5099},"end":{"line":124,"column":11,"offset":5109},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To get linting error feedback while writing javascript and SCSS in VS Code, install the ","position":{"start":{"line":126,"column":1,"offset":5111},"end":{"line":126,"column":89,"offset":5199},"indent":[]}},{"type":"link","title":null,"url":"https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint","children":[{"type":"text","value":"stylelint","position":{"start":{"line":126,"column":90,"offset":5200},"end":{"line":126,"column":99,"offset":5209},"indent":[]}}],"position":{"start":{"line":126,"column":89,"offset":5199},"end":{"line":126,"column":170,"offset":5280},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":126,"column":170,"offset":5280},"end":{"line":126,"column":175,"offset":5285},"indent":[]}},{"type":"link","title":null,"url":"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint","children":[{"type":"text","value":"ESlint","position":{"start":{"line":126,"column":176,"offset":5286},"end":{"line":126,"column":182,"offset":5292},"indent":[]}}],"position":{"start":{"line":126,"column":175,"offset":5285},"end":{"line":126,"column":259,"offset":5369},"indent":[]}},{"type":"text","value":" extensions. We use ESLint's Prettier rules to format and lint all of our JavaScript in one pass. To get your code to format properly on save, add the following to a ","position":{"start":{"line":126,"column":259,"offset":5369},"end":{"line":126,"column":425,"offset":5535},"indent":[]}},{"type":"inlineCode","value":".vscode/settings.json","position":{"start":{"line":126,"column":425,"offset":5535},"end":{"line":126,"column":448,"offset":5558},"indent":[]}},{"type":"text","value":" in the root of your project","position":{"start":{"line":126,"column":448,"offset":5558},"end":{"line":126,"column":476,"offset":5586},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":5111},"end":{"line":126,"column":476,"offset":5586},"indent":[]}},{"type":"code","lang":"json","meta":"path=.vscode/settings.json","value":"{\n  \"editor.formatOnSave\": true,\n  \"[javascript]\": {\n    \"editor.formatOnSave\": false\n  },\n  \"[javascriptreact]\": {\n    \"editor.formatOnSave\": false\n  },\n  \"eslint.autoFixOnSave\": true,\n  \"prettier.disableLanguages\": [\"javascript\", \"javascriptreact\"]\n}","position":{"start":{"line":128,"column":1,"offset":5588},"end":{"line":140,"column":4,"offset":5879},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To lint the entire project and get errors in your ","position":{"start":{"line":142,"column":1,"offset":5881},"end":{"line":142,"column":51,"offset":5931},"indent":[]}},{"type":"inlineCode","value":"Problems","position":{"start":{"line":142,"column":51,"offset":5931},"end":{"line":142,"column":61,"offset":5941},"indent":[]}},{"type":"text","value":" tray, you can add the following to a ","position":{"start":{"line":142,"column":61,"offset":5941},"end":{"line":142,"column":99,"offset":5979},"indent":[]}},{"type":"inlineCode","value":".vscode/tasks.json","position":{"start":{"line":142,"column":99,"offset":5979},"end":{"line":142,"column":119,"offset":5999},"indent":[]}},{"type":"text","value":" file in the root of your project. You can run these tasks with ","position":{"start":{"line":142,"column":119,"offset":5999},"end":{"line":142,"column":183,"offset":6063},"indent":[]}},{"type":"inlineCode","value":"cmd+shift+d","position":{"start":{"line":142,"column":183,"offset":6063},"end":{"line":142,"column":196,"offset":6076},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":5881},"end":{"line":142,"column":196,"offset":6076},"indent":[]}},{"type":"code","lang":"json","meta":"path=.vscode/tasks.json","value":"{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"type\": \"npm\",\n      \"script\": \"lint:js\",\n      \"problemMatcher\": \"$eslint-stylish\"\n    },\n    {\n      \"type\": \"npm\",\n      \"script\": \"lint:scss\",\n      \"problemMatcher\": {\n        \"owner\": \"stylelint\",\n        \"fileLocation\": [\"relative\", \"${workspaceFolder}\"],\n        \"pattern\": [\n          {\n            \"regexp\": \"^([^\\\\s].*)$\",\n            \"file\": 1\n          },\n          {\n            \"regexp\": \"^\\\\s+(\\\\d+):(\\\\d+)\\\\s+(✖|warning)\\\\s+(.*)\\\\s\\\\s+(.*)$\",\n            \"line\": 1,\n            \"column\": 2,\n            \"severity\": 3,\n            \"message\": 4,\n            \"code\": 5,\n            \"loop\": true\n          }\n        ]\n      }\n    }\n  ]\n}","position":{"start":{"line":144,"column":1,"offset":6078},"end":{"line":178,"column":4,"offset":6813},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":181,"column":1,"offset":6816},"end":{"line":181,"column":31,"offset":6846},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":181,"column":31,"offset":6846}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/mjperrins/projects/cat/guide/node_modules/gatsby-theme-carbon/src/templates/Default.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`Use this guide to contribute to the theme. We’ll show you how to get the development environment set up as quickly as possible so you can start contributing.`}</p>\n    </PageDescription>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Project setup</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Development</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Work in a branch</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Sass and CSS Modules</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">VS Code</AnchorLink>\n    </AnchorLinks>\n    <h2 {...{\n      \"id\": \"project-setup\"\n    }}>{`Project setup`}</h2>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Go to `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/carbon-design-system/gatsby-theme-carbon\"\n          }}>{`gatsby-theme-carbon`}</a>{` and click the `}<inlineCode parentName=\"p\">{`Fork`}</inlineCode>{` button in the top-right corner.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`After it’s finished, click on the `}<inlineCode parentName=\"p\">{`Clone or Download`}</inlineCode>{` button and copy the contents.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`In your terminal, clone the repo into your directory of choice`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-sh\"\n          }}>{`git clone [PASTE_URL_HERE]\ncd gatsby-theme-carbon\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`When you clone your forked repo the `}<inlineCode parentName=\"p\">{`origin`}</inlineCode>{` is set to your fork by default. You’ll want to add a remote that points to the upstream repo.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-sh\"\n          }}>{`git remote add upstream git@github.com:carbon-design-system/gatsby-theme-carbon.git\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`In your terminal, verify that the remotes have been set`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-sh\"\n          }}>{`git remote -v\n`}</code></pre>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"development\"\n    }}>{`Development`}</h2>\n    <p>{`We use `}<a parentName=\"p\" {...{\n        \"href\": \"https://yarnpkg.com/lang/en/docs/install/\"\n      }}>{`yarn`}</a>{` and yarn workspaces to develop the Carbon Gatsby theme. This allows us to have a development environment that’s closely linked to the theme with minimal setup. Run `}<inlineCode parentName=\"p\">{`yarn install`}</inlineCode>{` to install all of the projects dependencies.`}</p>\n    <p>{`This project has two packages: the actual theme package (`}<inlineCode parentName=\"p\">{`gatsby-theme-carbon`}</inlineCode>{`) and the `}<inlineCode parentName=\"p\">{`example`}</inlineCode>{` package. The example package emulates a project which uses the theme. Its only dependencies are Gatsby, React, and the adjacent theme package. The `}<inlineCode parentName=\"p\">{`example`}</inlineCode>{` package also serves as the theme’s documentation and `}<a parentName=\"p\" {...{\n        \"href\": \"https://gatsby-theme-carbon.now.sh\"\n      }}>{`website`}</a>{`; it’s deployed on every merge to master.`}</p>\n    <p>{`New theme development will happen in the theme package while documentation and testing of that change will occur through changes in the example directory.`}</p>\n    <h3 {...{\n      \"id\": \"development-scripts\"\n    }}>{`Development scripts`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn dev`}</inlineCode>{` – start the development environment`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn dev:clean`}</inlineCode>{` – clear cache and restart dev`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn format`}</inlineCode>{` – format your code with prettier`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn lint`}</inlineCode>{` - check for errors in your javascript`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"work-in-a-branch\"\n    }}>{`Work in a branch`}</h2>\n    <p>{`You should always start a new project by pulling upstream changes into master and then creating a new branch. This workflow ensures you don’t accidentally commit anything to your master branch and get stuck when trying to open a pull request.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`git checkout master\ngit pull upstream master\ngit checkout -b my-branch-name\n`}</code></pre>\n    <p>{`When you’re ready to open a pull request, push to your origin remote.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`git push origin my-branch-name\n`}</code></pre>\n    <p>{`You’ll get a message in your terminal with a URL to open up a pull request in the upstream repository. Navigate to that URL and be sure to give a detailed summary of your pull request in the title and body section of the form.`}</p>\n    <h2 {...{\n      \"id\": \"sass-and-css-modules\"\n    }}>{`Sass and CSS Modules`}</h2>\n    <p>{`For internal theme components we use `}<a parentName=\"p\" {...{\n        \"href\": \"https://sass-lang.com/documentation/syntax\"\n      }}>{`Sass`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/css-modules/css-modules#css-modules\"\n      }}>{`CSS Modules`}</a>{`. This allows us to take advantage of the Carbon Design System resources while not worrying about className collisions. By default, each `}<inlineCode parentName=\"p\">{`.scss`}</inlineCode>{` file will be supplied with all of the Carbon Sass `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/carbon-design-system/carbon/blob/master/packages/components/src/globals/scss/_vars.scss\"\n      }}>{`variables`}</a>{`: color, spacing, theme, and motion, as well as type and layout mixins, are imported automatically.`}</p>\n    <p>{`You should colocate your stylesheet with the component(s) that import it. If the component is `}<inlineCode parentName=\"p\">{`TreeView`}</inlineCode>{` then the stylesheet should be `}<inlineCode parentName=\"p\">{`TreeView.module.scss`}</inlineCode>{`. All contained within the `}<inlineCode parentName=\"p\">{`TreeView`}</inlineCode>{` directory.`}</p>\n    <h3 {...{\n      \"id\": \"css-modules\"\n    }}>{`CSS Modules`}</h3>\n    <p>{`You don’t need to prefix your classes as CSS Modules will generate unique class names for you. Import the class from the `}<inlineCode parentName=\"p\">{`.scss`}</inlineCode>{` file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\",\n        \"metastring\": \"path=TreeView.module.scss\",\n        \"path\": \"TreeView.module.scss\"\n      }}>{`.treeView {\n  color: $text-01;\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"path=TreeView.js\",\n        \"path\": \"TreeView.js\"\n      }}>{`import { treeView } from './style.css';\n\nconst TreeView = props => <div className={treeView} />;\n`}</code></pre>\n    <p>{`For conditionally applying class names, use the `}<inlineCode parentName=\"p\">{`classname`}</inlineCode>{` library. Note how we’re using a `}<a parentName=\"p\" {...{\n        \"href\": \"https://tylermcginnis.com/computed-property-names/\"\n      }}>{`computed property name`}</a>{` for the property being based to `}<inlineCode parentName=\"p\">{`cx`}</inlineCode>{`. That’s because the className isn’t literally `}<inlineCode parentName=\"p\">{`\"long\"`}</inlineCode>{` it’s a value generated by CSS Modules and placed in the `}<inlineCode parentName=\"p\">{`long`}</inlineCode>{` variable.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"path=TreeView.js\",\n        \"path\": \"TreeView.js\"\n      }}>{`import cx from 'classname';\nimport { treeView, long } from './style.css';\n\nconst TreeView = props => {\n  const className = cx(treeView, {\n    [long]: props.long,\n  });\n  const TreeView = props => <div className={className} />;\n};\n`}</code></pre>\n    <p>{`If you need to target a global class not processed by CSS Modules, you can do so with the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/css-modules/css-modules#exceptions\"\n      }}>{`global selector`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`:global(.bx--grid) .codeBlock {\n  @include carbon--type-style('code-01');\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"vs-code\"\n    }}>{`VS Code`}</h2>\n    <p>{`To get linting error feedback while writing javascript and SCSS in VS Code, install the `}<a parentName=\"p\" {...{\n        \"href\": \"https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint\"\n      }}>{`stylelint`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\"\n      }}>{`ESlint`}</a>{` extensions. We use ESLint’s Prettier rules to format and lint all of our JavaScript in one pass. To get your code to format properly on save, add the following to a `}<inlineCode parentName=\"p\">{`.vscode/settings.json`}</inlineCode>{` in the root of your project`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\",\n        \"metastring\": \"path=.vscode/settings.json\",\n        \"path\": \".vscode/settings.json\"\n      }}>{`{\n  \"editor.formatOnSave\": true,\n  \"[javascript]\": {\n    \"editor.formatOnSave\": false\n  },\n  \"[javascriptreact]\": {\n    \"editor.formatOnSave\": false\n  },\n  \"eslint.autoFixOnSave\": true,\n  \"prettier.disableLanguages\": [\"javascript\", \"javascriptreact\"]\n}\n`}</code></pre>\n    <p>{`To lint the entire project and get errors in your `}<inlineCode parentName=\"p\">{`Problems`}</inlineCode>{` tray, you can add the following to a `}<inlineCode parentName=\"p\">{`.vscode/tasks.json`}</inlineCode>{` file in the root of your project. You can run these tasks with `}<inlineCode parentName=\"p\">{`cmd+shift+d`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\",\n        \"metastring\": \"path=.vscode/tasks.json\",\n        \"path\": \".vscode/tasks.json\"\n      }}>{`{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"type\": \"npm\",\n      \"script\": \"lint:js\",\n      \"problemMatcher\": \"$eslint-stylish\"\n    },\n    {\n      \"type\": \"npm\",\n      \"script\": \"lint:scss\",\n      \"problemMatcher\": {\n        \"owner\": \"stylelint\",\n        \"fileLocation\": [\"relative\", \"\\${workspaceFolder}\"],\n        \"pattern\": [\n          {\n            \"regexp\": \"^([^\\\\\\\\s].*)$\",\n            \"file\": 1\n          },\n          {\n            \"regexp\": \"^\\\\\\\\s+(\\\\\\\\d+):(\\\\\\\\d+)\\\\\\\\s+(✖|warning)\\\\\\\\s+(.*)\\\\\\\\s\\\\\\\\s+(.*)$\",\n            \"line\": 1,\n            \"column\": 2,\n            \"severity\": 3,\n            \"message\": 4,\n            \"code\": 5,\n            \"loop\": true\n          }\n        ]\n      }\n    }\n  ]\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}